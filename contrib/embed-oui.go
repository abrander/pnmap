// +build ignore

package main

import (
	"encoding/csv"
	"fmt"
	"html/template"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
)

var ouiTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package main

var ouiToVendor = map[string]string{
{{ range $key, $value := . }}	"{{ $key }}": "{{ $value }}",
{{ end }}
}
`))

func main() {
	resp, err := http.Get("https://raw.githubusercontent.com/hdm/mac-ages/main/data/ieee/oui.csv")
	if err != nil {
		log.Fatalf("%s", err.Error())
	}
	defer resp.Body.Close()

	toVendor := make(map[string]string)

	out, err := os.Create("oui.go")
	if err != nil {
		log.Fatalf("%s", err.Error())
	}

	r := csv.NewReader(resp.Body)

	// Burn the header.
	_, _ = r.Read()

	for {
		record, err := r.Read()
		if err == io.EOF {
			break
		}

		if err != nil {
			log.Fatalf("%s", err.Error())
		}

		if len(record[1]) != 6 {
			panic(record)
		}

		lower := strings.ToLower(record[1])
		mac := fmt.Sprintf("%c%c:%c%c:%c%c", lower[0], lower[1], lower[2], lower[3], lower[4], lower[5])
		vendor := strings.TrimSpace(record[2])

		toVendor[mac] = vendor
	}
	toVendor["52:54:00"] = "QEMU"

	ouiTemplate.Execute(out, toVendor)
}
